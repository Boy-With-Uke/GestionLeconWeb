generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id_user           Int             @unique @default(autoincrement())
  nom               String
  prenom            String
  email             String          @unique
  motDePasse        String
  classeUtilisateur Int
  classe            Classe?         @relation(fields: [classeUtilisateur], references: [id_classe], onDelete: Cascade, onUpdate: Cascade)
  coursUtilisateur  Int?
  niveauAccess      Role            @default(USER)
  lessons           usersFavLecon[]
  Matiere           Matiere[]
}

model Matiere {
  id_matiere            Int                     @unique @default(autoincrement())
  nom                   String                  @unique
  description           String
  enseignantDelaMatiere Int
  enseignant            User                    @relation(fields: [enseignantDelaMatiere], references: [id_user], onDelete: Cascade, onUpdate: Cascade)
  classeMatiere         matiereDeLaClasse[]
  lecon                 matiereContenantLecon[]
}

model matiereContenantLecon {
  matiere    Matiere  @relation(fields: [matieresId], references: [id_matiere], onDelete: Cascade, onUpdate: Cascade)
  matieresId Int
  lessons    Lecon    @relation(fields: [lessonId], references: [id_lecon], onDelete: Cascade, onUpdate: Cascade)
  lessonId   Int
  assignedAt DateTime @default(now())

  @@unique([matieresId, lessonId])
  @@map("matiereContenantLecon")
}

model Filiere {
  id_filiere Int      @unique @default(autoincrement())
  nomFiliere String   @unique
  classes    Classe[]
}

model Classe {
  id_classe     Int                 @unique @default(autoincrement())
  nomClasse     String              @unique
  classeMatiere matiereDeLaClasse[]
  userClasse    User[]
  filiere       Int
  classeFiliere Filiere             @relation(fields: [filiere], references: [id_filiere], onDelete: Cascade, onUpdate: Cascade)
}

model Lecon {
  id_lecon              Int                     @unique @default(autoincrement())
  titre                 String                  @unique
  contenue              String
  type                  String                  @default("LESSON")
  utilisateurquiSuivent usersFavLecon[]
  matiereLesson         matiereContenantLecon[]
}

model matiereDeLaClasse {
  classes    Classe   @relation(fields: [classId], references: [id_classe], onDelete: Cascade, onUpdate: Cascade)
  classId    Int
  matieres   Matiere  @relation(fields: [matiereId], references: [id_matiere], onDelete: Cascade, onUpdate: Cascade)
  matiereId  Int
  assignedAt DateTime @default(now())

  @@unique([classId, matiereId])
}

model usersFavLecon {
  lessons  Lecon @relation(fields: [lessonId], references: [id_lecon], onDelete: Cascade, onUpdate: Cascade)
  lessonId Int
  user     User  @relation(fields: [userId], references: [id_user], onDelete: Cascade, onUpdate: Cascade)
  userId   Int

  assignedAt DateTime @default(now())

  @@unique([userId, lessonId])
  @@map("usersFavLecon")
}

enum Type {
  Controle
  Examen
}

enum Role {
  USER
  ENSEIGNANT
  ADMIN
}
